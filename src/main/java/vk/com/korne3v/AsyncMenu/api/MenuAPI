package vk.com.korne3v.AsyncMenu.api;

import org.apache.commons.lang.Validate;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import vk.com.korne3v.AsyncMenu.AsyncMenu;
import vk.com.korne3v.AsyncMenu.menu.Menu;
import vk.com.korne3v.AsyncMenu.menu.interfaces.InventoryClick;
import vk.com.korne3v.AsyncMenu.utils.ItemUtil;

import java.util.HashMap;

public class MenuAPI {

    private static HashMap<Inventory, Menu> guis = new HashMap<>();

    private AsyncMenu plugin;

    public MenuAPI(final AsyncMenu plugin){

        this.plugin = plugin;

        Bukkit.getPluginManager().registerEvents(new Listener() {

            @EventHandler
            public void onClick(InventoryClickEvent event) {

                Menu menu = guis.get(event.getWhoClicked().getOpenInventory().getTopInventory());

                if (menu == null) {
                    return;
                }

                event.setCancelled(true);

                if (event.getClickedInventory() == null || !event.getClickedInventory().equals(menu.getInventory())) return;

                if (event.getCurrentItem() == null || event.getCurrentItem().getType() == Material.AIR) return;

                InventoryClick inventoryClick = menu.getItems().get(event.getSlot());

                if (inventoryClick != null) {
                    inventoryClick.onClick((Player) event.getWhoClicked(), event.getClick());
                }

            }

            @EventHandler
            public void onClick(InventoryCloseEvent event) {

                Menu menu = guis.get(event.getInventory());

                if (menu == null) {
                    return;
                }

                if (menu.isRemoveOnClose()) {
                    menu.unregister();
                }

            }

        }, plugin);

    }

    public AsyncMenu getPlugin() {
        return plugin;
    }

    public Menu create(final String title, int rows) {

        Validate.notNull(title, "Title is null");
        Validate.notEmpty(title, "Title is empty");

        if(rows > 6 || rows < 1){
            try {
                throw new Exception("Number of rows cannot be more than 6 or less than 1");
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        Inventory inventory = Bukkit.createInventory(null, rows * 9, title);

        Menu menu = new Menu() {

            private boolean removeOnClose = false;
            private boolean registered = true;
            private HashMap<Integer, InventoryClick> items = new HashMap<>();

            @Override
            public int getRows() {
                return rows;
            }

            @Override
            public String getTitle() {
                return title;
            }

            @Override
            public Inventory getInventory() {
                return inventory;
            }

            @Override
            public boolean isRegistered() {
                return registered;
            }

            @Override
            public void unregister() {
                registered = false;
                getItems().clear();
                getInventory().clear();
                guis.remove(getInventory());
            }

            @Override
            public boolean isRemoveOnClose() {
                return removeOnClose;
            }

            @Override
            public Menu setRemoveOnClose(boolean removeOnClose) {
                this.removeOnClose = removeOnClose;
                return this;
            }

            @Override
            public HashMap<Integer, InventoryClick> getItems() {
                return items;
            }

            @Override
            public Menu addItem(ItemUtil gameItem, InventoryClick inventoryClick) {
                return addItem(gameItem.build(), inventoryClick);
            }

            @Override
            public Menu addItem(ItemStack itemStack, InventoryClick inventoryClick) {
                inventory.addItem(itemStack);
                items.put(items.size(), inventoryClick);
                return this;
            }

            @Override
            public Menu setItem(int slot, ItemUtil gameItem, InventoryClick inventoryClick) {
                return setItem(slot, gameItem.build(), inventoryClick);
            }

            @Override
            public Menu setItem(int slot, ItemStack itemStack, InventoryClick inventoryClick) {
                inventory.setItem(slot, itemStack);
                items.put(slot, inventoryClick);
                return this;
            }
        };

        guis.put(inventory, menu);

        return menu;

    }

}
